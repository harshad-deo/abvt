#![allow(non_snake_case)]
#![allow(unused_variables)]
#![allow(unused_imports)]


// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod abvt {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::EndianScalar;

    pub enum SimStepOffset {}
    #[derive(Copy, Clone, Debug, PartialEq)]

    pub struct SimStep<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for SimStep<'a> {
        type Inner = SimStep<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf: buf, loc: loc },
            }
        }
    }

    impl<'a> SimStep<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            SimStep { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args SimStepArgs<'args>,
        ) -> flatbuffers::WIPOffset<SimStep<'bldr>> {
            let mut builder = SimStepBuilder::new(_fbb);
            builder.add_idx(args.idx);
            if let Some(x) = args.score {
                builder.add_score(x);
            }
            if let Some(x) = args.positions {
                builder.add_positions(x);
            }
            builder.finish()
        }

        pub const VT_IDX: flatbuffers::VOffsetT = 4;
        pub const VT_POSITIONS: flatbuffers::VOffsetT = 6;
        pub const VT_SCORE: flatbuffers::VOffsetT = 8;

        #[inline]
        pub fn idx(&self) -> u64 {
            self._tab.get::<u64>(SimStep::VT_IDX, Some(0)).unwrap()
        }
        #[inline]
        pub fn positions(&self) -> Option<flatbuffers::Vector<'a, f32>> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(
                    SimStep::VT_POSITIONS,
                    None,
                )
        }
        #[inline]
        pub fn score(&self) -> Option<flatbuffers::Vector<'a, f32>> {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(
                    SimStep::VT_SCORE,
                    None,
                )
        }
    }

    pub struct SimStepArgs<'a> {
        pub idx: u64,
        pub positions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
        pub score: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    }
    impl<'a> Default for SimStepArgs<'a> {
        #[inline]
        fn default() -> Self {
            SimStepArgs {
                idx: 0,
                positions: None,
                score: None,
            }
        }
    }
    pub struct SimStepBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> SimStepBuilder<'a, 'b> {
        #[inline]
        pub fn add_idx(&mut self, idx: u64) {
            self.fbb_.push_slot::<u64>(SimStep::VT_IDX, idx, 0);
        }
        #[inline]
        pub fn add_positions(
            &mut self,
            positions: flatbuffers::WIPOffset<flatbuffers::Vector<'b, f32>>,
        ) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(SimStep::VT_POSITIONS, positions);
        }
        #[inline]
        pub fn add_score(&mut self, score: flatbuffers::WIPOffset<flatbuffers::Vector<'b, f32>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(SimStep::VT_SCORE, score);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SimStepBuilder<'a, 'b> {
            let start = _fbb.start_table();
            SimStepBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<SimStep<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    #[inline]
    pub fn get_root_as_sim_step<'a>(buf: &'a [u8]) -> SimStep<'a> {
        flatbuffers::get_root::<SimStep<'a>>(buf)
    }

    #[inline]
    pub fn get_size_prefixed_root_as_sim_step<'a>(buf: &'a [u8]) -> SimStep<'a> {
        flatbuffers::get_size_prefixed_root::<SimStep<'a>>(buf)
    }

    #[inline]
    pub fn finish_sim_step_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<SimStep<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_sim_step_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<SimStep<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod abvt
